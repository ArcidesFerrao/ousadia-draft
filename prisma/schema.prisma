// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?
  color       String
  brand       String
  price       Float
  imageUrl    String // main image for quick display
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  images      ProductImage[] // Relationship with ProductImage
  Order       Order[]
  ProductSize ProductSize[]
}

model ProductSize {
  id        String   @id @default(uuid())
  size      String
  stock     Int      @default(0)
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         Int      @id @default(autoincrement())
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  price      Float // Product price at the time of purchase
  quantity   Int // Quantity of this product in the order
  discount   Float? // Discount applied to this product (optional)
  totalPrice Float
  status     String   @default("pending") // pending, shipped, delivered, canceled
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  products    Product[]
}

model ProductImage {
  id        Int       @id @default(autoincrement())
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  type      ImageType // Enum for image types
  url       String // Url for image
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum ImageType {
  front
  back
  sideL
  sideR
}
